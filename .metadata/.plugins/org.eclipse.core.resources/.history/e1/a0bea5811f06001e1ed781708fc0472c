package com.RestApi.RestApi.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.RestApi.RestApi.entities.Book;
import com.RestApi.RestApi.services.BookServices;

@RestController
public class BooksController {
	
	@Autowired
	private BookServices bookservice;
	
	//get all books
	@GetMapping("/books")
	public ResponseEntity<List<Book>> getBooks() {
		List<Book>list=bookservice.getAllBooks();
		if(list.size()<=0)
		{
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.of(Optional.of(list));
	}
	
	//single book
	@GetMapping("/books/{id}")
	public ResponseEntity<Book> getBook(@PathVariable("id")int id) {
	Book book = bookservice.getBookById(id);
		if(book==null) 
		{
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	return ResponseEntity.of(Optional.of(book));
	}
	
	
	//new book
	@PostMapping("/books")
	public ResponseEntity<Book> addBook(@RequestBody Book book) {
		//object book 
		Book b =null;
		try {
		b= this.bookservice.addBook(book);
		System.out.println(b);
		return  ResponseEntity.of(Optional.of(b));
		
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
		
	}
	
	//delete book
	
	@DeleteMapping("/books/{bookId}")
	public ResponseEntity<Void> deleteBook(@PathVariable("bookId") int bookId) {
		//it will represent the java keyword void
		try {
		this.bookservice.deleteBook(bookId);
		return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
		}catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
		
	}
	
	//update book
	@PutMapping("/books/{id}")
	//again we get the information of updated book
	public Book updateBook(@RequestBody Book book,@PathVariable("id") int id){
		this.bookservice.updateBook(book,id);
		return book;
		
		
	}
}
